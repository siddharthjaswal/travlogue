package com.aurora.travlogue.core.data.local.dao

import androidx.room.*
import com.aurora.travlogue.core.domain.model.Booking
import kotlinx.coroutines.flow.Flow

@Dao
interface BookingDao {

    @Query("SELECT * FROM bookings WHERE tripId = :tripId ORDER BY startDateTime ASC")
    fun getBookingsByTripId(tripId: String): Flow<List<Booking>>

    @Query("SELECT * FROM bookings WHERE tripId = :tripId ORDER BY startDateTime ASC")
    suspend fun getBookingsByTripIdSync(tripId: String): List<Booking>

    @Query("SELECT * FROM bookings WHERE id = :bookingId")
    suspend fun getBookingById(bookingId: String): Booking?

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertBooking(booking: Booking)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertBookings(bookings: List<Booking>)

    @Update
    suspend fun updateBooking(booking: Booking)

    @Delete
    suspend fun deleteBooking(booking: Booking)

    @Query("DELETE FROM bookings WHERE id = :bookingId")
    suspend fun deleteBookingById(bookingId: String)

    @Query("DELETE FROM bookings WHERE tripId = :tripId")
    suspend fun deleteBookingsByTripId(tripId: String)
}
