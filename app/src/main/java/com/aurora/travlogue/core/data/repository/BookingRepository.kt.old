package com.aurora.travlogue.core.data.repository

import com.aurora.travlogue.core.data.local.dao.BookingDao
import com.aurora.travlogue.core.domain.model.Booking
import kotlinx.coroutines.flow.Flow
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class BookingRepository @Inject constructor(
    private val bookingDao: BookingDao
) {

    fun getBookingsByTripId(tripId: String): Flow<List<Booking>> {
        return bookingDao.getBookingsByTripId(tripId)
    }

    suspend fun getBookingsByTripIdSync(tripId: String): List<Booking> {
        return bookingDao.getBookingsByTripIdSync(tripId)
    }

    suspend fun getBookingById(bookingId: String): Booking? {
        return bookingDao.getBookingById(bookingId)
    }

    suspend fun insertBooking(booking: Booking) {
        bookingDao.insertBooking(booking)
    }

    suspend fun insertBookings(bookings: List<Booking>) {
        bookingDao.insertBookings(bookings)
    }

    suspend fun updateBooking(booking: Booking) {
        bookingDao.updateBooking(booking)
    }

    suspend fun deleteBooking(booking: Booking) {
        bookingDao.deleteBooking(booking)
    }

    suspend fun deleteBookingById(bookingId: String) {
        bookingDao.deleteBookingById(bookingId)
    }

    suspend fun deleteBookingsByTripId(tripId: String) {
        bookingDao.deleteBookingsByTripId(tripId)
    }
}
