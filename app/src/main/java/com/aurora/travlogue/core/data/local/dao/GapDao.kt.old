package com.aurora.travlogue.core.data.local.dao

import androidx.room.*
import com.aurora.travlogue.core.domain.model.Gap
import kotlinx.coroutines.flow.Flow

@Dao
interface GapDao {

    @Query("SELECT * FROM gaps WHERE tripId = :tripId ORDER BY fromDate ASC")
    fun getGapsByTripId(tripId: String): Flow<List<Gap>>

    @Query("SELECT * FROM gaps WHERE tripId = :tripId AND isResolved = 0 ORDER BY fromDate ASC")
    fun getUnresolvedGapsByTripId(tripId: String): Flow<List<Gap>>

    @Query("SELECT * FROM gaps WHERE tripId = :tripId ORDER BY fromDate ASC")
    suspend fun getGapsByTripIdSync(tripId: String): List<Gap>

    @Query("SELECT * FROM gaps WHERE id = :gapId")
    suspend fun getGapById(gapId: String): Gap?

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertGap(gap: Gap)

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertGaps(gaps: List<Gap>)

    @Update
    suspend fun updateGap(gap: Gap)

    @Delete
    suspend fun deleteGap(gap: Gap)

    @Query("DELETE FROM gaps WHERE id = :gapId")
    suspend fun deleteGapById(gapId: String)

    @Query("DELETE FROM gaps WHERE tripId = :tripId")
    suspend fun deleteGapsByTripId(tripId: String)

    @Query("UPDATE gaps SET isResolved = 1 WHERE id = :gapId")
    suspend fun markGapAsResolved(gapId: String)
}
